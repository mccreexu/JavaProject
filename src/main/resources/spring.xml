<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 1、Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<context:component-scan base-package="com.atguigu">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 2、导入外部配置文件（数据库连接的登录信息等） -->
	<context:property-placeholder location="classpath:dbconfig.properties" />

	<!-- 3、配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
	</bean>

	<!-- 4、配置使用mybatis操作数据库；根据配置文件得到sqlSessionFactory -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!-- 5、把每一个dao接口的实现加入到ioc容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.atguigu.dao"></property>
	</bean>

	<!-- 6、配置事务控制，配置事务管理器，让它控制住数据源里面的连接的关闭和提交 -->
	<bean id="dataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 8、基于xml配置(重要的都用配置式，不重要的可以用注解式)，配置事务，哪些方法切入事务要写切入点表达式 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.atguigu.service.*.*(..))" id="txPoint" />
		<aop:advisor advice-ref="myTx" pointcut-ref="txPoint" />
	</aop:config>

	<!-- 7、配置事务增强、事务属性、事务建议 transaction-manager="tm";指定要配置的事务管理器的id -->
	<tx:advice id="myTx" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="java.lang.Exception" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>

</beans>
